필요조건
 - body-parser: 브라우저에서 입력받은 정보에 접근 가능(필수x)
 - cookie-parser, express-session: passport의 인증이 실행된 뒤 유저의 정보를 저장하는데 사용
 - passport, passport-local

index.ts 작성 시 주의사항
 - session 설정 이후에 passport.initialize()와 passport.session()이 위치해야함.

사용 파일들 파일 내 코드와 함꼐 설명을 써둠.
 - passport/index
 - passport/localStrategy : 로그인 코드.
 - routes/middleware : 로그인 여부 파악하는 코드.
   
 - routes/user - router.post('/login', ...) : 로그인!

진짜 대충 개념
 - 로그인하면 세션에 이를 저장하고, 로그인 관련 동작할 떄 db에 가서 체크하는게 아닌
 - 세션에서 찾아보는 것.

대충 돌아가는 사이클
   - 로그인 체크
      router.get("/", isLoggedIn, (req, res) ~~ 호출
      > isLoggedIn 먼저 실행한 뒤 (req, res) => {}를 실행함
      ( isLoggendIn : 로그인중인 경우 > 다음 콜백함수로 / 로그인중이 아닌 경우 > 에러, 다음 콜백 실행x )
      ( isNotLoggendIn : 반대 )
      isLoggedIn을 실행 하면 req.isAuthenticated()를 실행
      ( isLoggedIn, isNotLoggedIn은 생략하고 즉시 isAuthenticated을 사용해도 됨. )
      isAuthenticated()는 로그인 여부를 뱉어냄.(passport 내부 함수라고 보면될듯)

passport 규칙 설정
   - passport/index.ts 에 대한 설명은 해당 파일에 상세히 기술해놓음
   - passport/localStrategy.ts : 로그인 방법(규칙)
      -  usernameField: "userId",
         passwordField: "password", > 사용할 변수명 설정
      - db검색해서 로그인하는건데 걍 passport 안써도 되는 거 아니냐?
      - db검색은 중요한게 아니고 >> 로그인 -> 로그인 정보 세션에 저장 << 이 중요한것.
      - local로그인의 경우 localStrategy를 쓰듯이
      - 다른 로그인 방법도 kakaoStrategy 이런식으로 쓸 수 있다~(안써봄)



0128 ////
 현재상황 - 세션 파일에 세션 정상적으로 저장. 백에서 쿠키도 정상적으로 생성됨.
 문제상황 - 로그인은 잘 되나 확인했을떄 문제
 > isLoggedIn까지 실행되나 앞단으로 리턴값을 가져오지 못함.
 > 로그인을 해도 안해도 401 리턴. 
 > req.isAuthenticated()가 계속 false를 반환하는 것같음.
 > 로그인체크시 세션이 새로 만들어지면서 기존 세션에서 id를 가져오지 못하는것으로 추정.
 > deserializeUser가 제대로 실행되지 않은것? > 이건 아닌듯
 > 로그인한 직후엔 실행됨.
 > 와중에 로그아웃도 제대로 안먹는다.
 > 아니다 이제 잘 먹는다
 > 로그인/로그아웃 잘 되지만 페이지가 바뀌면 세션을 못가져오는것같다.
 > 아니다 걍 /user 이놈이 못가져오는게 문젠듯
 > api에서 설정을 건드려주니 해결. 어이가 없네 ㅋㅋ 또 등잔밑이 어둡다 했죠?
 > 하지만 아주 짧게 오류가 떳다 사라진다.
 > 왜 또 안뜸?
 > header쪽에 로그인체크를 넣었더니 한무렌더링이 된다. 왜?
 > login은 재렌더링이 안되지만 loginCheck는 재렌더링이 되니 둘의 차이때문인것으로 추정.
 > isLoggedIn과 isNotLoggedIn의 res.~~에서 재렌더링이 되는듯
 > 는 걍 /user/userInfo도 재렌더링 ㅈㄴ된다. isLoggedIn없는데 ㅋㅋ

// 로그인
[0] OPTIONS /user/login 204 1.277 ms - 0
[0]  ***************** isNotLoggedIn
[0] 로그인중이 아님!
[0]  |||||||||||||||||||| post/login
[0] Executing (default): SELECT `id`, `nickname`, `userId`, `password`, `createdAt`, `updatedAt` FROM `user` AS `User` WHERE `User`.`userId` = 'marrtil';
[0] ######### serializeUser --  5
[0] OPTIONS / 204 0.149 ms - 0
[0] POST /user/login 302 561.387 ms - 23
[0] $$$$$$$$$ deserializeUser --  5
[0] Executing (default): SELECT `id`, `nickname`, `userId`, `password`, `createdAt`, `updatedAt` FROM `user` AS `User` WHERE `User`.`id` = 5;
[0] GET / 304 3.253 ms - -

// 로그인했는지 확인
[0]  ***************** isLoggedIn
[0] GET /user 401 2.098 ms - 29

// 로그아웃
[0] $$$$$$$$$ deserializeUser --  { id: 5 }
[0] Executing (default): SELECT `id`, `nickname`, `userId`, `password`, `createdAt`, `updatedAt` FROM `user` AS `User` WHERE `User`.`id` = '[object Object]' LIMIT 1;
// 로그아웃2 - 잘되는듯
[0]  ***************** isLoggedIn {
[0]   id: 5,
[0]   nickname: '윤지섭',
[0]   userId: 'marrtil',
[0]   password: '$2b$12$vjCEOd73Ty7NDPJr1Y5kLOLWyU.Em3J9TNKWlLcsUioLnvTq4K3H.',
[0]   createdAt: 2023-01-26T05:38:29.000Z,
[0]   updatedAt: 2023-01-26T05:38:29.000Z
[0] }
[0] 이미 로그인중!
[0] OPTIONS / 204 0.110 ms - 0
[0] POST /user/logout 302 21.325 ms - 23
[0] GET / 304 1.244 ms - -
// 한번더 로그아웃 했을때
[0]  ***************** isLoggedIn undefined
[0] POST /user/logout 401 2.307 ms - 29

// 0130
 > 쿠키를 쓸까 세션을 쓸까...
 > 페이지 이동시 로그아웃이 다시 로그인으로 돌아가는 현상 확인.
    > state 초기값 지정으로 해결.일뻔
 > 재렌더링 되는 이유
    > credentials: 'include' 가 있으면 재렌더링
    > isLoggedIn은 문제가 아님.
    > deserializeUser에서 재렌더링이 일어나는건지 모르겟다.
    > 백세션에 접근하면 그런거같긴하다.
 > 로그인체크의 기능 : 로그인 중이라면 유저의 정보를 가져오는 것.
    > 언제 불러야 하나 : 정보가 필요한 페이지를 로드할 때. => 로그인 한 상태여야함.


"server": "ts-node index",